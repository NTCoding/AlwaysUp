
Requirement
------------

Need to create a music streaming platform with no planned downtime. This includes
needed to fix bugs, add new features, and error scenarios.


Use Erlang Features
--------------------

Hot code loading:
		
	+ the system will develop a bug that needs to be fixed.
	  Using hot code loading, the bug will be fixed without any
	  downtime. All new requests will get the updated code,
	  whilst existing requests will not be interrupted and continue
	  to use the old code


Process Monitoring:

	+ When an error condition arises a system process will catch it
	  and ensure that the request will continue to be fulfilled by
	  a new process. This should demonstrate minimum, if any, disruption
	  to the client


Performance

	+ TBA


Scalability

	+ TBA


Demo
----

+ Demo the use of all Erlang features

+ Show the equivalent in .NET
	- is it possible to maintain the same level of uptime?
	- what would it take to maintain same level of uptime?
	- will existing requests be aborted or quality degraded

+ How every process is a server - not 1 server with multiple threads

+ OTP libararies


Plan 
-----

1. Playlist service that repeatedly streams 1 song from file stream
	+ Knock up a web application that just returns some binary from a single endpoint
	+ Webmachine

2. Create client that is able to stream the music
	+ maybe look into the erlang book and use the streaming from that

3. Playlist continuously streams songs randomly from the file stream

4. As multiple clients connect, they get the same playlist in synchronisation

5. Playlist server errors
	+ After a certain amount of time the playlist node stops working
	+ system process restarts it in another process on same node
	+ should be no/minimal disruption to users
	+ 1 to 1 system process to worker process

6. Hot code loading to fix bug
	+ Push a fix for the problem that causes the error above

7. System process for web tier?
	+ this time have one system process for many processes

8. Hot code loading for web tier
	+ Add some new feature - http headers? ability to go backwards in the playlist? name of song?

9. Distribute the system

10. Use a riak back end

11. Performance?

12. Scalability?







Links 
-----
http://stackoverflow.com/questions/7307634/how-do-you-design-the-architecture-of-an-erlang-otp-based-distributed-fault-tole









Requirement
------------

Need to create a music streaming platform with no planned downtime. This includes
needed to fix bugs, add new features, and error scenarios.


Use Erlang Features
--------------------

Hot code loading:
		
	+ the system will develop a bug that needs to be fixed.
	  Using hot code loading, the bug will be fixed without any
	  downtime. All new requests will get the updated code,
	  whilst existing requests will not be interrupted and continue
	  to use the old code


Process Monitoring:

	+ When an error condition arises a system process will catch it
	  and ensure that the request will continue to be fulfilled by
	  a new process. This should demonstrate minimum, if any, disruption
	  to the client


Performance

	+ Monitoring / metrics


Scalability

	+ Reach peak usage on a single node - show adding a new node doubles capacity?


Demo
----

+ Demo the use of all Erlang features

+ Show the equivalent in .NET
	- is it possible to maintain the same level of uptime?
	- what would it take to maintain same level of uptime?
	- will existing requests be aborted or quality degraded

+ How every process is a server - not 1 server with multiple threads

+ OTP libararies


Plan 
-----

**** PLAYLIST FEATURES ****

1. Playlist service that repeatedly streams 1 song from file stream
	+ Knock up a web application that just returns some binary from a single endpoint
	
2. Playlist continuously streams songs randomly from the file stream

3. As multiple clients connect, they get the same playlist in synchronisation
	
4. Send the correct metadata to the client  [playlist name] - [current song]


**** HOT CODE LOADING ****

1. Playlist server errors
	+ After a certain amount of time the playlist node stops working
	+ system process restarts it in another process on same node
	+ should be no/minimal disruption to users
	+ 1 to 1 system process to worker process

1.5 Supervision strategy - supervisor will then start the required modules 

2. Hot code loading to fix bug
	+ Push a fix for the problem that causes the error above


**** DISTRIBUTE THE SYSTEM ****

9. Use a riak back end for high-availability songs
	+ use opportunity to learn about riak in advance of contributing to the project
	+ create a command-line app that will scan a file directory and pump the music into riak

10. use SOA and add other services using message queues and buses
	+ imaginery business components?
	+ allow users to have accounts
	+ marketing component uses data from clients

11. Maybe incorporate CQRS into some of these components?
	





Links 
-----
http://stackoverflow.com/questions/7307634/how-do-you-design-the-architecture-of-an-erlang-otp-based-distributed-fault-tole







